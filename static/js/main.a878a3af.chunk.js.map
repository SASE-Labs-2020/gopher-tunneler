{"version":3,"sources":["Shared.js","components/Direction.js","components/Contributing.js","components/RouteSelection.js","components/AppMap.js","components/About.js","components/Header.js","App.js","serviceWorker.js","index.js","GopherTnlr.PNG"],"names":["NoPaths","Card","text","Body","Title","Subtitle","className","Button","variant","href","process","getData","url","a","fetch","response","json","Direction","props","state","data","noPath","Dijkstra","require","graph","buildings","path","this","start","end","names","paths","reduce","acc","cur","idx","src","length","concat","urls","map","join","getAll","Promise","all","setState","Accordion","defaultActiveKey","Toggle","as","Header","eventKey","origin","destination","Collapse","ListGroup","info","item","Item","instr","Figure","Image","width","uri","style","Caption","desc","Component","Contributing","Text","RouteSelection","Object","keys","e","target","value","Form","id","Group","controlId","Label","Control","name","form","onChange","logStart","required","logEnd","to","Leaflet","Icon","Default","imagePath","AppMap","markerData","isLoading","edsger","starts_ends","entries","ends","n_ends","Array","fill","zip","rows","_","index","row","arr_paths","starts","unflattened_urls","new_path","console","log","apply","marker_urls","values","building","forEach","then","responseData","prevState","Spinner","animation","Tabs","Tab","title","Map","center","zoom","TileLayer","attribution","Polyline","color","positions","coordinates","point","latitude","longitude","Marker","position","location","Popup","university","public","accessibility","About","Img","alt","useQuery","URLSearchParams","useLocation","search","AMComponent","query","get","DComponent","routes","exact","main","HeaderComponent","Navbar","bg","expand","Brand","logo","height","aria-controls","Nav","Link","route","key","children","document","basename","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.a878a3af.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport function NoPaths() {\r\n\treturn (\r\n\t\t<Card text=\"dark\">\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<Card.Title>Path not found</Card.Title>\r\n\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">You can't use the Gopher Way to get between the two buildings you selected. Try looking at the map for possible paths.</Card.Subtitle>\r\n\t\t\t\t<Button variant=\"secondary\" href={`${process.env.PUBLIC_URL}/`}>Try again</Button>\r\n\t\t\t</Card.Body>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport async function getData(url) {\r\n\tconst response = await fetch(url);\r\n\treturn response.json()\r\n}","import React, { Component } from 'react';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Figure from 'react-bootstrap/Figure';\nimport Card from 'react-bootstrap/Card';\nimport Accordion from 'react-bootstrap/Accordion';\nimport { NoPaths, getData } from '../Shared';\n\nexport default class Direction extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { data: [], noPath: false };\n\t}\n\n\tasync componentDidMount() {\n\t\tconst Dijkstra = require('node-dijkstra');\n\t\tconst graph = new Dijkstra(await getData('https://SASE-Labs-2020.github.io/assets/graph.json'));\n\t\tconst buildings = graph.path(this.props.start, this.props.end);\n\t\t// convert ['nameOfBldg1', 'nameOfBldg2', 'nameOfBldg3'] to\n\t\t// [['filenameOfBldg1', 'filenameOfBldg2'], ['filenameOfBldg2', 'filenameOfBldg3']]\n\t\tif (buildings) {\n\t\t\tconst names = await getData('https://SASE-Labs-2020.github.io/assets/names.json');\n\t\t\tconst paths = buildings.reduce((acc, cur, idx, src) => idx < src.length - 1 ? acc.concat([[names[cur], names[src[idx+1]]]]) : acc, []);\n\t\t\tconst urls = paths.map(path => 'https://SASE-Labs-2020.github.io/assets/directions/' + path.join('_') + '.json');\n\t\t\t// preserve order using a map rather than a async iterative calls\n\t\t\tconst getAll = async () => Promise.all(urls.map(url => getData(url)));\n\t\t\tconst data = await getAll();\n\t\t\tthis.setState({ data: data });\n\t\t} else {\n\t\t\tthis.setState({ noPath: true });\n\t\t}\n\t}\n\n\trender() {\n\t\tif (this.state.noPath) {\n\t\t\treturn <NoPaths/>;\n\t\t}\n\t\treturn (\n\t\t\t<Accordion defaultActiveKey='0'>\n\t\t\t\t{this.state.data.map((data, idx) =>\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<Accordion.Toggle as={Card.Header} eventKey={`${idx}`}>\n\t\t\t\t\t\t\t{`${data.origin} to ${data.destination}`}\n\t\t\t\t\t\t</Accordion.Toggle>\n\t\t\t\t\t\t<Accordion.Collapse eventKey={`${idx}`}>\n\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t{data.info.map(item =>\n\t\t\t\t\t\t\t\t\t\t<ListGroup.Item variant=\"primary\">\n\t\t\t\t\t\t\t\t\t\t\t<p>{item.instr}</p>\n\t\t\t\t\t\t\t\t\t\t\t<Figure>\n\t\t\t\t\t\t\t\t\t\t\t\t<Figure.Image width='90%' src={item.src ? item.src.uri : ''} style={item.src ? {} : {'display':'none'}}/>\n\t\t\t\t\t\t\t\t\t\t\t\t<Figure.Caption>{item.desc}</Figure.Caption>\n\t\t\t\t\t\t\t\t\t\t\t</Figure>\n\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t</Accordion.Collapse>\n\t\t\t\t\t</Card>\n\t\t\t\t)}\n\t\t\t</Accordion>\n\t\t);\n\t}\n}\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nexport default function Contributing() {\r\n\treturn (\r\n\t\t<Card text=\"dark\">\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<Card.Title>Contributing</Card.Title>\r\n\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">Know something about the Gopher Way not included yet? YOU can add to it!</Card.Subtitle>\r\n\t\t\t\t<Card.Text>\r\n\t\t\t\t\tOption 1 (preferred): Create a GitHub Issue\r\n\t\t\t\t</Card.Text>\r\n\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">\r\n\t\t\t\t\tNo programming knowledge needed. Only an email for an account.\r\n\t\t\t\t</Card.Subtitle>\r\n\t\t\t\t<Button variant=\"secondary\" href=\"https://github.com/SASE-Labs-2020/SASE-Labs-2020.github.io/issues/new\">Create an Issue</Button>\r\n\t\t\t\t\r\n\t\t\t\t<Card.Text>\r\n\t\t\t\t\tOption 2: Submit a Google Form\r\n\t\t\t\t</Card.Text>\r\n\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">\r\n\t\t\t\t\tIf you would prefer not to make a GitHub account, we also have an anonymous form.\r\n\t\t\t\t</Card.Subtitle>\r\n\t\t\t\t<Button variant=\"secondary\" href=\"https://forms.gle/PUGtoRsrAP3jrcj67\">Submit the Form</Button>\r\n\t\t\t</Card.Body>\r\n\t\t</Card>\r\n\t)\r\n}\r\n","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { getData } from '../Shared';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class RouteSelection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { data: [], start: null, end: null };\r\n    }\r\n\r\n    async getData(url) {\r\n\t\tconst response = await fetch(url);\r\n\t\treturn response.json();\r\n\t}\r\n\r\n    async componentDidMount() {\r\n        const names = Object.keys(await getData('https://SASE-Labs-2020.github.io/assets/names.json'));\r\n        this.setState({ data: names });\r\n    }\r\n\r\n    logStart(e) {\r\n        this.setState({ start: e.target.value });\r\n    }\r\n\r\n    logEnd(e) {\r\n        this.setState({ end: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card text=\"dark\">\r\n                <Form as='form' id='rs'>\r\n                    <Form.Group controlId=\"start\">\r\n                        <Form.Label>Choose a Start Building</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"start\" id=\"start\" form='rs' onChange={(e) => this.logStart(e)} required>\r\n                            {this.state.data.map(name => <option value={name}>{name}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"end\">\r\n                        <Form.Label>Choose an End Building</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"end\" id=\"end\" form='rs' onChange={(e) => this.logEnd(e)} required>\r\n                            {this.state.data.map(name => <option value={name}>{name}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Button variant=\"secondary\">\r\n                        <Link to={`/directions?start=${this.state.start}&end=${this.state.end}`}>\r\n                            Get Directions\r\n                        </Link>\r\n                    </Button>{' '}\r\n                    <Button variant=\"secondary\">\r\n                        <Link to={`/map?start=${this.state.start}&end=${this.state.end}`}>\r\n                            See Path\r\n                        </Link>\r\n                    </Button>{' '}\r\n                    <Button variant=\"secondary\">\r\n                        <Link to={`/map?start=null&end=null`}>\r\n                            See all Paths\r\n                        </Link>\r\n                    </Button>\r\n                </Form>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport Leaflet from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport {\n  Map,\n  Polyline,\n  TileLayer,\n  Marker,\n  Popup\n} from 'react-leaflet';\nimport '../map.css';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { NoPaths, getData } from '../Shared';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\n\n// pull images from cdn instead of storing locally\nLeaflet.Icon.Default.imagePath = '//cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.4/images/';\n\nexport default class AppMap extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { data: [], markerData: [], isLoading: true, noPath: false };\n\t}\n\n\tasync componentWillMount() {\n\t\t// urls for the direction jsons\n\t\tvar urls;\n\t\tvar marker_urls;\n\t\tconst Dijkstra = require('node-dijkstra');\n\t\tconst graph = await getData('https://SASE-Labs-2020.github.io/assets/graph.json');\n\t\tconst edsger = new Dijkstra(graph);\n\t\tconst names = await getData('https://SASE-Labs-2020.github.io/assets/names.json');\n\t\tif (this.props.start === 'null') {\n\t\t\t// convert { buildingA : { buildingB: 2, buildingC: 1 }, buldingD : { buildingE: 3 } } to\n\t\t\t// [[['buildingA','buildingA'],['buildingB','buildingC']], [['buildingD'], ['buildingE']]]\n\t\t\tconst starts_ends = Object.entries(graph).map(([start, ends]) => {\n\t\t\t\tconst n_ends = Object.keys(ends).length;\n\t\t\t\treturn [Array(n_ends).fill(start), Object.keys(ends)];\n\t\t\t});\n\t\t\t// need something like zip in python\n\t\t\tconst zip = rows => rows[0].map((_,index)=>rows.map(row=>row[index]));\n\t\t\t// convert [[['buildingA','buildingA'],['buildingB','buildingC']], [['buildingD'], ['buildingE']]] to\n\t\t\t// [[['buildingA', 'buildingB'], ['buildingA','buildingC']], [['buildingD', 'buildingE']]]\n\t\t\tconst arr_paths = starts_ends.map(([starts, ends]) => zip([starts, ends]));\n\t\t\t// convert [[['buildingA', 'buildingB'], ['buildingA','buildingC']], [['buildingD', 'buildingE']]] to\n\t\t\t// ['urlAtoB', 'urlAtoC', 'urlDtoE']\n\t\t\tconst unflattened_urls = arr_paths.map(\n\t\t\t\t(paths) => paths.map(\n\t\t\t\t\t(path) => {\n\t\t\t\t\t\tconst new_path = [names[path[0]], names[path[1]]];\n\t\t\t\t\t\tif (!names[path[0]]) {\n\t\t\t\t\t\t\tconsole.log('Please submit a contribution to fix this: ' + path[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!names[path[1]]) {\n\t\t\t\t\t\t\tconsole.log('Please submit a contribution to fix this: ' + path[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 'https://SASE-Labs-2020.github.io/assets/directions/' + new_path.join('_') + '.json';\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t\turls = [].concat.apply([], unflattened_urls);\n\t\t\tmarker_urls = Object.values(names).map(name => 'https://SASE-Labs-2020.github.io/assets/informations/' + name + '.json');\n\t\t} else {\n\t\t\tconst buildings = edsger.path(this.props.start, this.props.end);\n\t\t\tif (!buildings) {\n\t\t\t\treturn this.setState({ isLoading: false, noPath: true });\n\t\t\t}\n\t\t\t// convert ['buildingA', 'buildingB', 'buildingC'] to\n\t\t\t// [['filenameA', 'filenameB'], ['filenameB', 'filenameC']]\n\t\t\tconst paths = buildings.reduce((acc, cur, idx, src) => idx < src.length -1 ? acc.concat([[names[cur], names[src[idx+1]]]]) : acc, []);\n\t\t\turls = paths.map(path => 'https://SASE-Labs-2020.github.io/assets/directions/' + path.join('_') + '.json');\n\t\t\tmarker_urls = buildings.map(building => 'https://SASE-Labs-2020.github.io/assets/informations/' + names[building] + '.json');\n\t\t}\n\t\turls.forEach(url => {\n\t\t\treturn fetch(url)\n\t\t\t.then(response => response.json())\n\t\t\t.then((responseData) => {\n\t\t\t\tthis.setState(\n\t\t\t\t\t(prevState) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: prevState.data.concat(responseData),\n\t\t\t\t\t\t\tisLoading: false\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t\tmarker_urls.forEach(url => {\n\t\t\treturn fetch(url)\n\t\t\t.then(response => response.json())\n\t\t\t.then((responseData) => {\n\t\t\t\tthis.setState(\n\t\t\t\t\t(prevState) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tmarkerData: prevState.markerData.concat(responseData),\n\t\t\t\t\t\t\tisLoading: false\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\n\trender() {\n\t\tif (this.state.isLoading) {\n\t\t\treturn <Spinner animation=\"border\" variant=\"dark\"/>;\n\t\t}\n\t\tif (this.state.noPath) {\n\t\t\treturn <NoPaths/>;\n\t\t}\n\t\treturn (\n\t\t\t<Tabs defaultActiveKey='map' variant='pills'>\n\t\t\t\t<Tab eventKey='map' title={this.props.start === 'null' ? 'All Buildings and Paths' : `${this.props.start} to ${this.props.end}`}>\n\t\t\t\t\t<Map center={[44.974208, -93.2325]} zoom={15}>\n\t\t\t\t\t\t<TileLayer\n   \t\t       \t\t\tattribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n   \t\t       \t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n   \t\t     \t\t/>\n\t\t\t\t\t\t<Polyline color=\"#0668B3\" positions={this.state.data.map(json => json.coordinates.map(point => [point.latitude, point.longitude]))} />\n\t\t\t\t\t\t{this.state.markerData.map(json => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Marker position={[json.location.latitude, json.location.longitude]}>\n\t\t\t\t\t\t\t\t\t<Popup>\n\t\t\t\t\t\t\t\t\t\t<h3>{json.building}</h3>\n\t\t\t\t\t\t\t\t\t\t{json.info.university ? <h8 style={{ 'white-space': 'pre-line' }}>{json.info.university}<br/><br/></h8> : null}\n\t\t\t\t\t\t\t\t\t\t{json.info.public ? <h8 style={{ 'white-space': 'pre-line' }}>{json.info.public}<br/><br/></h8> : null}\n\t\t\t\t\t\t\t\t\t\t{json.info.accessibility ? <h8 style={{ 'white-space': 'pre-line' }}>{json.info.accessibility}<br/><br/></h8> : null}\n\t\t\t\t\t\t\t\t\t</Popup>\n\t\t\t\t\t\t\t\t</Marker>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</Map>\n\t\t\t\t</Tab>\n\t\t\t</Tabs>\n\t\t);\n\t}\n}\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nexport default function About() {\r\n    return (\r\n        <Card text=\"dark\">\r\n            <Card.Body>\r\n                <Card.Subtitle className=\"mb-2 text-muted\">Are you using a mobile device?</Card.Subtitle>\r\n                <Card.Img src='https://miro.medium.com/max/1200/0*vqtNPYkC7qCbKAqa.png' alt='Share button on Safari'/>\r\n                <Card.Text>\r\n                    Select 'Add to Home Screen' on Apple or Android\r\n                </Card.Text>\r\n                <Card.Title>About this app</Card.Title>\r\n                <Card.Text>\r\n                    'Gopher Tunneler' allows you to navigate the Gopher Way at the University of Minnesota's Twin Cities campus.\r\n                    The tunnel system is a maze-like labyrinth; get a better idea of it on the 'Map' tab. \r\n                    <br/><br/>\r\n                    Want to get somewhere quick? Select your start and end points on the 'Route Selection' tab. You'll get instructions to get from \r\n                    building to building when you hit submit. \r\n                    <br/><br/>\r\n                    The app is based on incomplete research of the tunnels. If you\r\n                    have captioned pictures and written instructions to navigate the Gopher Way, please send them to use via the\r\n                    'Contributing' tab!\r\n                </Card.Text>\r\n                <Card.Subtitle className=\"mb-2 text-muted\">SASE Labs</Card.Subtitle>\r\n                <Card.Text>\r\n                    'Gopher Tunneler' was developed as a project in SASE Labs. SASE Labs is the University of Minnesota's\r\n                    Society of Asian Scientists and Engineers laboratory division. We work on interdisciplinary STEM projects\r\n                    and learn new skills together. In just a year, our team went from not knowing how to program in JavaScript\r\n                    to developing this app using React and learning about git, GitHub, higher-order functions, APIs, and much \r\n                    more along the way!\r\n                </Card.Text>\r\n                <Button variant=\"secondary\" href=\"https://saseumn.org\">Learn more about SASE</Button>{' '}<Button variant=\"secondary\" href=\"https://discord.gg/Z9VEKrh\">Join our discord</Button>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Direction from './Direction';\nimport Contributing from './Contributing';\nimport RouteSelection from './RouteSelection';\nimport AppMap from './AppMap';\nimport About from './About';\nimport { Nav } from 'react-bootstrap';\nimport {\n  BrowserRouter as Router,\n  useLocation,\n  Link,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport logo from '../GopherTnlr.PNG';\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\n// the query parameter hook is only usable in function components\n// wrap all of our components as a function for use\n\nfunction AMComponent() {\n\tlet query = useQuery();\n\n\treturn <AppMap start={query.get('start')} end={query.get('end')}/>;\n}\n\nfunction DComponent() {\n\tlet query = useQuery();\n\n\treturn <Direction start={query.get('start')} end={query.get('end')}/>;\n}\n\nvar routes = [\n\t{\n\t\tpath: '/',\n\t\texact: true,\n\t\tmain: () => <RouteSelection/>\n\t},\n\t{\n\t\tpath: '/map',\n\t\tmain: () => <AMComponent/>\n\t},\n\t{\n\t\tpath: '/directions',\n\t\tmain: () => <DComponent/>\n\t},\n\t{\n\t\tpath: '/contributing',\n\t\tmain: () => <Contributing/>\n\t},\n\t{\n\t\tpath: '/about',\n\t\tmain: () => <About/>\n\t}\n]\n\nfunction HeaderComponent() {\n\tlet query = useQuery();\n\n\treturn (\n\t\t<div>\n\t\t\t<Navbar bg='primary' expand=''>\n\t\t\t\t<Navbar.Brand href={`${process.env.PUBLIC_URL}/`}>\n\t\t\t\t\t<img src={logo} alt='GT Logo' height='30vh'/>{' '}\n\t\t\t\t\tGopher Tunneler\n\t\t\t\t</Navbar.Brand>\n\t\t\t\t<Navbar.Toggle style={{ 'backgroundColor': '#7DC242' }}aria-controls=\"basic-navbar-nav\" />\n\t\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\n\t\t\t\t\t<Nav>\n\t\t\t\t\t\t<Nav.Link><Link to={`/?start=${query.get('start')}&end=${query.get('end')}`}>Route Selection</Link></Nav.Link>\n\t\t\t\t\t\t<Nav.Link><Link to={`/map?start=${query.get('start')}&end=${query.get('end')}`}>Map</Link></Nav.Link>\n\t\t\t\t\t\t<Nav.Link><Link to={`/directions?start=${query.get('start')}&end=${query.get('end')}`}>Directions</Link></Nav.Link>\n\t\t\t\t\t\t<Nav.Link><Link to={`/contributing?start=${query.get('start')}&end=${query.get('end')}`}>Contributing</Link></Nav.Link>\n\t\t\t\t\t\t<Nav.Link><Link to={`/about?start=${query.get('start')}&end=${query.get('end')}`}>About</Link></Nav.Link>\n\t\t\t\t\t</Nav>\n\t\t\t\t</Navbar.Collapse>\n\t\t\t</Navbar>\n\t\t\t<Switch>\n\t\t\t\t<div style={{ 'paddingTop': 20 }}>\n\t\t\t\t\t{routes.map((route, index) => (\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tpath={route.path}\n\t\t\t\t\t\t\texact={route.exact}\n\t\t\t\t\t\t\tchildren={<route.main/>}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</Switch>\n\t\t</div>\n\t);\n}\n\nexport default function Header() {\n\tdocument.title = 'Gopher Tunneler'\n\treturn (\n\t\t<Router basename={`${process.env.PUBLIC_URL}/`}>\n\t\t\t<HeaderComponent/>\n\t\t</Router>\n\t);\n}\n","import React from 'react';\nimport './bootstrap.css';\nimport Header from './components/Header';\n\nfunction App() {\n\treturn (\n    <Header/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/GopherTnlr.2fecbe69.PNG\";"],"sourceRoot":""}