{"version":3,"sources":["Shared.js","components/Direction.js","components/Contributing.js","components/RouteSelection.js","components/AppMap.js","components/Header.js","App.js","serviceWorker.js","index.js","sase_logo.png"],"names":["NoPaths","Card","text","Body","Title","Subtitle","className","Button","variant","href","getData","url","a","fetch","response","json","Direction","props","state","data","noPath","Dijkstra","require","graph","buildings","path","this","start","end","names","paths","reduce","acc","cur","idx","src","length","concat","map","join","forEach","then","responseData","setState","prevState","Tabs","defaultActiveKey","Tab","eventKey","title","origin","destination","ListGroup","info","item","Item","instr","Figure","Image","width","uri","style","Caption","desc","Component","Contributing","Text","RouteSelection","Object","keys","Form","as","action","method","id","Group","controlId","Label","Control","name","form","required","value","type","Leaflet","Icon","Default","imagePath","AppMap","isLoading","edsger","starts_ends","entries","ends","n_ends","Array","fill","zip","rows","_","index","row","arr_paths","starts","unflattened_urls","new_path","console","log","urls","apply","Spinner","animation","Map","center","zoom","TileLayer","attribution","Polyline","color","positions","coordinates","point","latitude","longitude","useQuery","URLSearchParams","useLocation","search","AMComponent","query","get","DComponent","routes","exact","main","HeaderComponent","Navbar","bg","Brand","logo","alt","height","Nav","Link","to","route","key","children","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.e2c74dd8.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport function NoPaths() {\r\n\treturn (\r\n\t\t<Card text=\"dark\">\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<Card.Title>Path not found</Card.Title>\r\n\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">You can't use the Gopher Way to get between the two buildings you selected</Card.Subtitle>\r\n\t\t\t\t<Button variant=\"secondary\" href=\"/\">Try again</Button>\r\n\t\t\t</Card.Body>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport async function getData(url) {\r\n\tconst response = await fetch(url);\r\n\treturn response.json()\r\n}","import React, { Component } from 'react';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Figure from 'react-bootstrap/Figure';\nimport { NoPaths, getData } from '../Shared';\n\nexport default class Direction extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { data: [], noPath: false };\n\t}\n\n\tasync componentDidMount() {\n\t\tconst Dijkstra = require('node-dijkstra');\n\t\tconst graph = new Dijkstra(await getData('https://SASE-Labs-2020.github.io/assets/graph.json'));\n\t\tconst buildings = graph.path(this.props.start, this.props.end);\n\t\t// convert ['nameOfBldg1', 'nameOfBldg2', 'nameOfBldg3'] to\n\t\t// [['filenameOfBldg1', 'filenameOfBldg2'], ['filenameOfBldg2', 'filenameOfBldg3']]\n\t\tif (buildings) {\n\t\t\tconst names = await getData('https://SASE-Labs-2020.github.io/assets/names.json');\n\t\t\tconst paths = buildings.reduce((acc, cur, idx, src) => idx < src.length - 1 ? acc.concat([[names[cur], names[src[idx+1]]]]) : acc, []);\n\t\t\tconst urls = paths.map(path => 'https://SASE-Labs-2020.github.io/assets/directions/' + path.join('_') + '.json');\n\t\t\turls.forEach(url => {\n\t\t\t\treturn fetch(url)\n\t\t\t\t\t.then(response => response.json())\n  \t      \t\t\t.then((responseData) => {\n  \t        \t\t\t\tthis.setState(\n\t\t\t\t\t\t\t\t(prevState) => {\n\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\tdata: prevState.data.concat(responseData)\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n  \t        \t\t\t\t);\n\t\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({ noPath: true });\n\t\t}\n\t}\n\n\trender() {\n\t\tif (this.state.noPath) {\n\t\t\treturn <NoPaths/>;\n\t\t}\n\t\treturn (\n\t\t\t<Tabs defaultActiveKey=\"0\">\n\t\t\t\t{this.state.data.map((data, idx) =>\n\t\t\t\t\t\t<Tab eventKey={`${idx}`} title={`${data.origin} to ${data.destination}`}>\n\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t{data.info.map(item =>\n\t\t\t\t\t\t\t\t\t\t<ListGroup.Item variant=\"primary\">\n\t\t\t\t\t\t\t\t\t\t\t<p>{item.instr}</p>\n\t\t\t\t\t\t\t\t\t\t\t<Figure>\n\t\t\t\t\t\t\t\t\t\t\t\t<Figure.Image width='90%' src={item.src ? item.src.uri : ''} style={item.src ? {} : {'display':'none'}}/>\n\t\t\t\t\t\t\t\t\t\t\t\t<Figure.Caption>{item.desc}</Figure.Caption>\n\t\t\t\t\t\t\t\t\t\t\t</Figure>\n\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t</Tab>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</Tabs>\n\t\t)\n\t}\n}\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nexport default function Contributing() {\r\n\treturn (\r\n\t\t<Card text=\"dark\">\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<Card.Title>Contributing</Card.Title>\r\n\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">Know something about the Gopher Way not included yet? YOU can add to it!</Card.Subtitle>\r\n\t\t\t\t<Card.Text>\r\n\t\t\t\t\tOption 1 (preferred): Create a GitHub Issue\r\n\t\t\t\t</Card.Text>\r\n\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">\r\n\t\t\t\t\tNo programming knowledge needed. Only an email for an account.\r\n\t\t\t\t</Card.Subtitle>\r\n\t\t\t\t<Button variant=\"secondary\" href=\"https://github.com/SASE-Labs-2020/SASE-Labs-2020.github.io/issues/new\">Create an Issue</Button>\r\n\t\t\t\t\r\n\t\t\t\t<Card.Text>\r\n\t\t\t\t\tOption 2: Submit a Google Form\r\n\t\t\t\t</Card.Text>\r\n\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">\r\n\t\t\t\t\tIf you would prefer not to make a GitHub account, we also have an anonymous form.\r\n\t\t\t\t</Card.Subtitle>\r\n\t\t\t\t<Button variant=\"secondary\" href=\"https://forms.gle/PUGtoRsrAP3jrcj67\">Submit the Form</Button>\r\n\t\t\t</Card.Body>\r\n\t\t</Card>\r\n\t)\r\n}\r\n","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { getData } from '../Shared';\r\n\r\nexport default class RouteSelection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { data: [] };\r\n    }\r\n\r\n    async getData(url) {\r\n\t\tconst response = await fetch(url);\r\n\t\treturn response.json();\r\n\t}\r\n\r\n    async componentDidMount() {\r\n        const names = Object.keys(await getData('https://SASE-Labs-2020.github.io/assets/names.json'));\r\n        this.setState({ data: names })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card text=\"dark\">\r\n                <Form as='form' action='/directions' method='GET' id='rs'>\r\n                    <Form.Group controlId=\"start\">\r\n                        <Form.Label>Choose a Start Building</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"start\" id=\"start\" form='rs' required>\r\n                            {this.state.data.map(name => <option value={name}>{name}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"end\">\r\n                        <Form.Label>Choose an End Building</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"end\" id=\"end\" form='rs' required>\r\n                            {this.state.data.map(name => <option value={name}>{name}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Button variant=\"secondary\" type=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport Leaflet from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport {\n  Map,\n  Polyline,\n  TileLayer\n} from 'react-leaflet';\nimport '../map.css';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { NoPaths, getData } from '../Shared';\n\n// pull images from cdn instead of storing locally\nLeaflet.Icon.Default.imagePath = '//cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.4/images/';\n\nexport default class AppMap extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { data: [], isLoading: true, noPath: false };\n\t}\n\n\tasync componentWillMount() {\n\t\tvar urls;\n\t\tconst Dijkstra = require('node-dijkstra');\n\t\tconst graph = await getData('https://SASE-Labs-2020.github.io/assets/graph.json');\n\t\tconst edsger = new Dijkstra(graph);\n\t\tconst names = await getData('https://SASE-Labs-2020.github.io/assets/names.json');\n\t\tif (this.props.start == null || this.props.start === 'null') {\n\t\t\t// convert { buildingA : { buildingB: 2, buildingC: 1 }, buldingD : { buildingE: 3 } } to\n\t\t\t// [[['buildingA','buildingA'],['buildingB','buildingC']], [['buildingD'], ['buildingE']]]\n\t\t\tconst starts_ends = Object.entries(graph).map(([start, ends]) => {\n\t\t\t\tconst n_ends = Object.keys(ends).length;\n\t\t\t\treturn [Array(n_ends).fill(start), Object.keys(ends)];\n\t\t\t});\n\t\t\t// need something like zip in python\n\t\t\tconst zip = rows => rows[0].map((_,index)=>rows.map(row=>row[index]));\n\t\t\t// convert [[['buildingA','buildingA'],['buildingB','buildingC']], [['buildingD'], ['buildingE']]] to\n\t\t\t// [[['buildingA', 'buildingB'], ['buildingA','buildingC']], [['buildingD', 'buildingE']]]\n\t\t\tconst arr_paths = starts_ends.map(([starts, ends]) => zip([starts, ends]));\n\t\t\t// convert [[['buildingA', 'buildingB'], ['buildingA','buildingC']], [['buildingD', 'buildingE']]] to\n\t\t\t// ['urlAtoB', 'urlAtoC', 'urlDtoE']\n\t\t\tconst unflattened_urls = arr_paths.map(\n\t\t\t\t(paths) => paths.map(\n\t\t\t\t\t(path) => {\n\t\t\t\t\t\tconst new_path = [names[path[0]], names[path[1]]];\n\t\t\t\t\t\tif (!names[path[0]]) {\n\t\t\t\t\t\t\tconsole.log(path[0]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!names[path[1]]) {\n\t\t\t\t\t\t\tconsole.log(path[1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 'https://SASE-Labs-2020.github.io/assets/directions/' + new_path.join('_') + '.json';\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t\turls = [].concat.apply([], unflattened_urls);\n\t\t} else {\n\t\t\tconst buildings = edsger.path(this.props.start, this.props.end);\n\t\t\tif (!buildings) {\n\t\t\t\treturn this.setState({ isLoading: false, noPath: true });\n\t\t\t}\n\t\t\t// convert ['buildingA', 'buildingB', 'buildingC'] to\n\t\t\t// [['filenameA', 'filenameB'], ['filenameB', 'filenameC']]\n\t\t\tconst paths = buildings.reduce((acc, cur, idx, src) => idx < src.length -1 ? acc.concat([[names[cur], names[src[idx+1]]]]) : acc, []);\n\t\t\turls = paths.map(path => 'https://SASE-Labs-2020.github.io/assets/directions/' + path.join('_') + '.json');\n\t\t}\n\t\turls.forEach(url => {\n\t\t\treturn fetch(url)\n\t\t\t.then(response => response.json())\n\t\t\t.then((responseData) => {\n\t\t\t\tconsole.log(responseData);\n\t\t\t\tthis.setState(\n\t\t\t\t\t(prevState) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: prevState.data.concat(responseData),\n\t\t\t\t\t\t\tisLoading: false\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\n\trender() {\n\t\tif (this.state.isLoading) {\n\t\t\treturn <Spinner animation=\"border\" variant=\"dark\"/>;\n\t\t}\n\t\tif (this.state.noPath) {\n\t\t\treturn <NoPaths/>;\n\t\t}\n\t\treturn (\n\t\t\t<Map center={[44.974208, -93.2325]} zoom={15}>\n\t\t\t\t<TileLayer\n          \t\t\tattribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          \t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        \t\t/>\n\t\t\t\t<Polyline color=\"#0668B3\" positions={this.state.data.map(json => json.coordinates.map(point => [point.latitude, point.longitude]))} />\n\t\t\t</Map>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Direction from './Direction';\nimport Contributing from './Contributing';\nimport RouteSelection from './RouteSelection';\nimport AppMap from './AppMap';\nimport { Nav } from 'react-bootstrap';\nimport {\n  BrowserRouter as Router,\n  useLocation,\n  Link,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport logo from '../sase_logo.png';\n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\n// the query parameter hook is only usable in function components\n// wrap all of our components as a function for use\n\nfunction AMComponent() {\n\tlet query = useQuery();\n\n\treturn <AppMap start={query.get('start')} end={query.get('end')}/>;\n}\n\nfunction DComponent() {\n\tlet query = useQuery();\n\n\treturn <Direction start={query.get('start')} end={query.get('end')}/>;\n}\n\nvar routes = [\n\t{\n\t\tpath: '/',\n\t\texact: true,\n\t\tmain: () => <RouteSelection/>\n\t},\n\t{\n\t\tpath: '/map',\n\t\tmain: () => <AMComponent/>\n\t},\n\t{\n\t\tpath: '/directions',\n\t\tmain: () => <DComponent/>\n\t},\n\t{\n\t\tpath: '/contributing',\n\t\tmain: () => <Contributing/>\n\t}\n]\n\nfunction HeaderComponent() {\n\tlet query = useQuery();\n\n\treturn (\n\t\t<div>\n\t\t\t<Navbar bg='primary'>\n\t\t\t\t<Navbar.Brand href=\"https://saseumn.org\">\n\t\t\t\t\t<img src={logo} alt='SASE Logo' height='30vh'/>{' '}\n\t\t\t\t</Navbar.Brand>\n\t\t\t\t<Nav>\n\t\t\t\t\t<Nav.Link><Link to={`/?start=${query.get('start')}&end=${query.get('end')}`}>Route Selection</Link></Nav.Link>\n\t\t\t\t\t<Nav.Link><Link to={`/map?start=${query.get('start')}&end=${query.get('end')}`}>Map</Link></Nav.Link>\n\t\t\t\t\t<Nav.Link><Link to={`/directions?start=${query.get('start')}&end=${query.get('end')}`}>Directions</Link></Nav.Link>\n\t\t\t\t\t<Nav.Link><Link to={`/contributing?start=${query.get('start')}&end=${query.get('end')}`}>Contributing</Link></Nav.Link>\n\t\t\t\t</Nav>\n\t\t\t</Navbar>\n\t\t\t<Switch>\n\t\t\t\t<div style={{ 'padding-top': 20 }}>\n\t\t\t\t\t{routes.map((route, index) => (\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tpath={route.path}\n\t\t\t\t\t\t\texact={route.exact}\n\t\t\t\t\t\t\tchildren={<route.main/>}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</Switch>\n\t\t</div>\n\t);\n}\n\nexport default function Header() {\n\treturn (\n\t\t<Router>\n\t\t\t<HeaderComponent/>\n\t\t</Router>\n\t)\n}\n","import React from 'react';\nimport './bootstrap.css';\nimport Header from './components/Header';\n\nfunction App() {\n\treturn (\n    <Header/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sase_logo.a97b4e53.png\";"],"sourceRoot":""}