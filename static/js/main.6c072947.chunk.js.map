{"version":3,"sources":["components/Direction.js","components/Contributing.js","components/RouteSelection.js","components/AppMap.js","components/Header.js","App.js","serviceWorker.js","index.js","sase_logo.png"],"names":["NoPaths","Card","text","Body","Title","Subtitle","className","Link","href","Direction","props","state","data","noPath","url","fetch","response","json","Dijkstra","require","this","getData","graph","buildings","path","start","end","names","paths","reduce","acc","cur","idx","src","length","concat","map","join","forEach","then","responseData","setState","prevState","Tabs","defaultActiveKey","Tab","eventKey","title","origin","destination","ListGroup","info","item","Item","variant","instr","Figure","Image","width","uri","style","Caption","desc","Component","Contributing","Text","Button","RouteSelection","Object","keys","Form","as","action","method","id","Group","controlId","Label","Control","name","form","required","value","type","Leaflet","Icon","Default","imagePath","AppMap","isLoading","edsger","starts_ends","entries","ends","n_ends","Array","fill","zip","rows","_","index","row","arr_paths","starts","unflattened_urls","new_path","console","log","urls","apply","Spinner","animation","Map","center","zoom","TileLayer","attribution","Polyline","color","positions","coordinates","point","latitude","longitude","useQuery","URLSearchParams","useLocation","search","AMComponent","query","get","DComponent","routes","exact","main","HeaderComponent","Navbar","Brand","logo","height","Nav","to","route","key","children","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.6c072947.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Figure from 'react-bootstrap/Figure';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nfunction NoPaths() {\r\n\treturn (\r\n\t\t<Card text=\"dark\">\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<Card.Title>Path not found</Card.Title>\r\n\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">You can't use the Gopher Way to get between the two buildings you selected</Card.Subtitle>\r\n\t\t\t\t<Card.Link href=\"/\">Try again</Card.Link>\r\n\t\t\t</Card.Body>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport default class Direction extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { data: [], noPath: false };\r\n\t}\r\n\r\n\tasync getData(url) {\r\n\t\tconst response = await fetch(url);\r\n\t\treturn response.json()\r\n\t}\r\n\r\n\tasync componentDidMount() {\r\n\t\tconst Dijkstra = require('node-dijkstra');\r\n\t\tconst graph = new Dijkstra(await this.getData('https://SASE-Labs-2020.github.io/assets/graph.json'));\r\n\t\tconst buildings = graph.path(this.props.start, this.props.end);\r\n\t\t// convert ['nameOfBldg1', 'nameOfBldg2', 'nameOfBldg3'] to\r\n\t\t// [['filenameOfBldg1', 'filenameOfBldg2'], ['filenameOfBldg2', 'filenameOfBldg3']]\r\n\t\tif (buildings) {\r\n\t\t\tconst names = await this.getData('https://SASE-Labs-2020.github.io/assets/names.json');\r\n\t\t\tconst paths = buildings.reduce((acc, cur, idx, src) => idx < src.length - 1 ? acc.concat([[names[cur], names[src[idx+1]]]]) : acc, []);\r\n\t\t\tconst urls = paths.map(path => 'https://SASE-Labs-2020.github.io/assets/directions/' + path.join('_') + '.json');\r\n\t\t\turls.forEach(url => {\r\n\t\t\t\treturn fetch(url)\r\n\t\t\t\t\t.then(response => response.json())\r\n  \t      \t\t\t.then((responseData) => {\r\n  \t        \t\t\t\tthis.setState(\r\n\t\t\t\t\t\t\t\t(prevState) => {\r\n\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\tdata: prevState.data.concat(responseData)\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t}\r\n  \t        \t\t\t\t);\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.setState({ noPath: true });\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.noPath) {\r\n\t\t\treturn <NoPaths/>;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Tabs defaultActiveKey=\"0\">\r\n\t\t\t\t{this.state.data.map((data, idx) =>\r\n\t\t\t\t\t\t<Tab eventKey={`${idx}`} title={`${data.origin} to ${data.destination}`}>\r\n\t\t\t\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t\t\t{data.info.map(item =>\r\n\t\t\t\t\t\t\t\t\t\t<ListGroup.Item variant=\"primary\">\r\n\t\t\t\t\t\t\t\t\t\t\t<p>{item.instr}</p>\r\n\t\t\t\t\t\t\t\t\t\t\t<Figure>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Figure.Image width='90%' src={item.src ? item.src.uri : ''} style={item.src ? {} : {'display':'none'}}/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<Figure.Caption>{item.desc}</Figure.Caption>\r\n\t\t\t\t\t\t\t\t\t\t\t</Figure>\r\n\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t\t</Tab>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t</Tabs>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nexport default class Contributing extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\t\treturn (\r\n\t\t\t<Card text=\"dark\">\r\n\t\t\t\t<Card.Body>\r\n\t\t\t\t\t<Card.Title>Contributing</Card.Title>\r\n\t\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">Know something about the Gopher Way not included yet? YOU can add to it!</Card.Subtitle>\r\n\t\t\t\t\t<Card.Text>\r\n\t\t\t\t\t\tOption 1 (preferred): Create a GitHub Issue\r\n\t\t\t\t\t</Card.Text>\r\n\t\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">\r\n\t\t\t\t\t\tNo programming knowledge needed. Only an email for an account.\r\n\t\t\t\t\t</Card.Subtitle>\r\n\t\t\t\t\t<Button variant=\"secondary\" href=\"https://github.com/SASE-Labs-2020/SASE-Labs-2020.github.io/issues/new\">Create an Issue</Button>\r\n\t\t\t\t\t\r\n\t\t\t\t\t<Card.Text>\r\n\t\t\t\t\t\tOption 2: Submit a Google Form\r\n\t\t\t\t\t</Card.Text>\r\n\t\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">\r\n\t\t\t\t\t\tIf you would prefer not to make a GitHub account, we also have an anonymous form.\r\n\t\t\t\t\t</Card.Subtitle>\r\n\t\t\t\t\t<Button variant=\"secondary\" href=\"https://forms.gle/PUGtoRsrAP3jrcj67\">Submit the Form</Button>\r\n\t\t\t\t</Card.Body>\r\n\t\t\t</Card>\r\n\t\t)\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nexport default class RouteSelection extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { data: [] };\r\n    }\r\n\r\n    async getData(url) {\r\n\t\tconst response = await fetch(url);\r\n\t\treturn response.json();\r\n\t}\r\n\r\n    async componentDidMount() {\r\n        const names = Object.keys(await this.getData('https://SASE-Labs-2020.github.io/assets/names.json'));\r\n        this.setState({ data: names })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card text=\"dark\">\r\n                <Form as='form' action='/directions' method='GET' id='rs'>\r\n                    <Form.Group controlId=\"start\">\r\n                        <Form.Label>Choose a Start Building</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"start\" id=\"start\" form='rs' required>\r\n                            {this.state.data.map(name => <option value={name}>{name}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"end\">\r\n                        <Form.Label>Choose an End Building</Form.Label>\r\n                        <Form.Control as=\"select\" name=\"end\" id=\"end\" form='rs' required>\r\n                            {this.state.data.map(name => <option value={name}>{name}</option>)}\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n                    <Button variant=\"secondary\" type=\"submit\">\r\n                        Submit\r\n                    </Button>\r\n                </Form>\r\n            </Card>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Leaflet from 'leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport {\r\n  Map,\r\n  Polyline,\r\n  TileLayer\r\n} from 'react-leaflet';\r\nimport '../map.css';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n// pull images from cdn instead of storing locally\r\nLeaflet.Icon.Default.imagePath = '//cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.4/images/';\r\n\r\nfunction NoPaths() {\r\n\treturn (\r\n\t\t<Card text=\"dark\">\r\n\t\t\t<Card.Body>\r\n\t\t\t\t<Card.Title>Path not found</Card.Title>\r\n\t\t\t\t<Card.Subtitle className=\"mb-2 text-muted\">You can't use the Gopher Way to get between the two buildings you selected</Card.Subtitle>\r\n\t\t\t\t<Button href=\"/\">Try again</Button>\r\n\t\t\t</Card.Body>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport default class AppMap extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { data: [], isLoading: true, noPath: false };\r\n\t}\r\n\r\n\tasync getData(url) {\r\n\t\tconst response = await fetch(url);\r\n\t\treturn response.json();\r\n\t}\r\n\r\n\tasync componentWillMount() {\r\n\t\tvar urls;\r\n\t\tconst Dijkstra = require('node-dijkstra');\r\n\t\tconst graph = await this.getData('https://SASE-Labs-2020.github.io/assets/graph.json');\r\n\t\tconst edsger = new Dijkstra(graph);\r\n\t\tconst names = await this.getData('https://SASE-Labs-2020.github.io/assets/names.json');\r\n\t\tif (this.props.start == null || this.props.start == 'null') {\r\n\t\t\t// convert { buildingA : { buildingB: 2, buildingC: 1 }, buldingD : { buildingE: 3 } } to\r\n\t\t\t// [[['buildingA','buildingA'],['buildingB','buildingC']], [['buildingD'], ['buildingE']]]\r\n\t\t\tconst starts_ends = Object.entries(graph).map(([start, ends]) => {\r\n\t\t\t\tconst n_ends = Object.keys(ends).length;\r\n\t\t\t\treturn [Array(n_ends).fill(start), Object.keys(ends)];\r\n\t\t\t});\r\n\t\t\t// need something like zip in python\r\n\t\t\tconst zip = rows => rows[0].map((_,index)=>rows.map(row=>row[index]));\r\n\t\t\t// convert [[['buildingA','buildingA'],['buildingB','buildingC']], [['buildingD'], ['buildingE']]] to\r\n\t\t\t// [[['buildingA', 'buildingB'], ['buildingA','buildingC']], [['buildingD', 'buildingE']]]\r\n\t\t\tconst arr_paths = starts_ends.map(([starts, ends]) => zip([starts, ends]));\r\n\t\t\t// convert [[['buildingA', 'buildingB'], ['buildingA','buildingC']], [['buildingD', 'buildingE']]] to\r\n\t\t\t// ['urlAtoB', 'urlAtoC', 'urlDtoE']\r\n\t\t\tconst unflattened_urls = arr_paths.map(\r\n\t\t\t\t(paths) => paths.map(\r\n\t\t\t\t\t(path) => {\r\n\t\t\t\t\t\tconst new_path = [names[path[0]], names[path[1]]];\r\n\t\t\t\t\t\tif (!names[path[0]]) {\r\n\t\t\t\t\t\t\tconsole.log(path[0]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (!names[path[1]]) {\r\n\t\t\t\t\t\t\tconsole.log(path[1]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn 'https://SASE-Labs-2020.github.io/assets/directions/' + new_path.join('_') + '.json';\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\turls = [].concat.apply([], unflattened_urls);\r\n\t\t} else {\r\n\t\t\tconst buildings = edsger.path(this.props.start, this.props.end);\r\n\t\t\tif (!buildings) {\r\n\t\t\t\treturn this.setState({ isLoading: false, noPath: true });\r\n\t\t\t}\r\n\t\t\t// convert ['buildingA', 'buildingB', 'buildingC'] to\r\n\t\t\t// [['filenameA', 'filenameB'], ['filenameB', 'filenameC']]\r\n\t\t\tconst paths = buildings.reduce((acc, cur, idx, src) => idx < src.length -1 ? acc.concat([[names[cur], names[src[idx+1]]]]) : acc, []);\r\n\t\t\turls = paths.map(path => 'https://SASE-Labs-2020.github.io/assets/directions/' + path.join('_') + '.json');\r\n\t\t}\r\n\t\turls.forEach(url => {\r\n\t\t\treturn fetch(url)\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then((responseData) => {\r\n\t\t\t\tconsole.log(responseData);\r\n\t\t\t\tthis.setState(\r\n\t\t\t\t\t(prevState) => {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdata: prevState.data.concat(responseData),\r\n\t\t\t\t\t\t\tisLoading: false\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.isLoading) {\r\n\t\t\treturn <Spinner animation=\"border\" variant=\"dark\"/>;\r\n\t\t}\r\n\t\tif (this.state.noPath) {\r\n\t\t\treturn <NoPaths/>;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<Map center={[44.974208, -93.2325]} zoom={15}>\r\n\t\t\t\t<TileLayer\r\n          \t\t\tattribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          \t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        \t\t/>\r\n\t\t\t\t<Polyline color=\"#0668B3\" positions={this.state.data.map(json => json.coordinates.map(point => [point.latitude, point.longitude]))} />\r\n\t\t\t</Map>\r\n\t\t);\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Direction from './Direction';\r\nimport Contributing from './Contributing';\r\nimport RouteSelection from './RouteSelection';\r\nimport AppMap from './AppMap';\r\nimport { Nav } from 'react-bootstrap';\r\nimport {\r\n  BrowserRouter as Router,\r\n  useLocation,\r\n  Link,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport logo from '../sase_logo.png';\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\n// the query parameter hook is only usable in function components\r\n// wrap all of our components as a function for use\r\n\r\nfunction AMComponent() {\r\n\tlet query = useQuery();\r\n\r\n\treturn <AppMap start={query.get('start')} end={query.get('end')}/>;\r\n}\r\n\r\nfunction DComponent() {\r\n\tlet query = useQuery();\r\n\r\n\treturn <Direction start={query.get('start')} end={query.get('end')}/>;\r\n}\r\n\r\nvar routes = [\r\n\t{\r\n\t\tpath: '/',\r\n\t\texact: true,\r\n\t\tmain: () => <RouteSelection/>\r\n\t},\r\n\t{\r\n\t\tpath: '/map',\r\n\t\tmain: () => <AMComponent/>\r\n\t},\r\n\t{\r\n\t\tpath: '/directions',\r\n\t\tmain: () => <DComponent/>\r\n\t},\r\n\t{\r\n\t\tpath: '/contributing',\r\n\t\tmain: () => <Contributing/>\r\n\t}\r\n]\r\n\r\nfunction HeaderComponent() {\r\n\tlet query = useQuery();\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Navbar>\r\n\t\t\t\t<Navbar.Brand href=\"https://saseumn.org\">\r\n\t\t\t\t\t<img src={logo} height='30vh'/>{' '}\r\n\t\t\t\t</Navbar.Brand>\r\n\t\t\t\t<Nav>\r\n\t\t\t\t\t<Nav.Link><Link to={`/?start=${query.get('start')}&end=${query.get('end')}`}>Route Selection</Link></Nav.Link>\r\n\t\t\t\t\t<Nav.Link><Link to={`/map?start=${query.get('start')}&end=${query.get('end')}`}>Map</Link></Nav.Link>\r\n\t\t\t\t\t<Nav.Link><Link to={`/directions?start=${query.get('start')}&end=${query.get('end')}`}>Directions</Link></Nav.Link>\r\n\t\t\t\t\t<Nav.Link><Link to={`/contributing?start=${query.get('start')}&end=${query.get('end')}`}>Contributing</Link></Nav.Link>\r\n\t\t\t\t</Nav>\r\n\t\t\t</Navbar>\r\n\t\t\t<Switch>\r\n\t\t\t\t{routes.map((route, index) => (\r\n\t\t\t\t\t<Route\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\tpath={route.path}\r\n\t\t\t\t\t\texact={route.exact}\r\n\t\t\t\t\t\tchildren={<route.main />}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t</Switch>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default function Header() {\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<HeaderComponent/>\r\n\t\t</Router>\r\n\t)\r\n}\r\n","import React from 'react';\r\nimport './bootstrap.css';\r\nimport Header from './components/Header';\r\n\r\nfunction App() {\r\n\treturn (\r\n    <Header/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/sase_logo.a97b4e53.png\";"],"sourceRoot":""}